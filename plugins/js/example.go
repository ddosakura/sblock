package sbjs

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/ddosakura/gklang"
)

// Example help user to know how to use the library
func (p *Plugin) Example(f *os.File) {
	raw := `// Example generated by sblock. CAN BE DELETED.

const NewFs = require("sblock4js")
const Raw = require("./raw")

const http = require('http')
const https = require('https')
const Koa = require('koa')

function getExt(path) {
	const index = path.lastIndexOf(".")
	if (index === -1) {
		return "text/html"
	}
	return path.substr(index)
}

function getContent(r) {
	return new Promise((resolve, reject) => {
		let cache = ''
		r.on('error', reject)
		r.on('data', (data) => cache += data)
		r.on('end', () => resolve(cache))
	})
}

const app = new Koa()
app.use(async (ctx, next) => {
	await next()

	// test the prefix '/public'
	var path = ctx.request.url
	const prefix = path.substr(0, 7)
	if (prefix !== '/public') {
		ctx.response.redirect('/public')
		return
	}
	path = path.substr(7)
	if (path === '') {
		path = '/'
	}
	if (path[0] !== '/') {
		ctx.response.redirect('/public')
		return
	}

	// default use index.html
	if (path[path.length - 1] === '/') {
		path += 'index.html'
	}
	path = path.substr(1)

	// get content
	const e = await vfs.exists(path)
	if (e) {
		ctx.response.type = getExt(path)
		const r = vfs.createReadStream(path)
		const c = await getContent(r)
		ctx.response.body = c
	} else {
		ctx.status = 404
	}
})

const [vfs, err] = NewFs(Raw)
if (err != null) {
	throw err
}
http.createServer(app.callback()).listen(3000)
`

	var qb bytes.Buffer
	fmt.Fprintf(&qb, raw)

	if err := ioutil.WriteFile(f.Name(), qb.Bytes(), 0644); err != nil {
		gklang.Er(err)
	}
}
